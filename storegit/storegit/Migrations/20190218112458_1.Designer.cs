// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using storegit.Models;

namespace storegit.Migrations
{
    [DbContext(typeof(shopeContext))]
    [Migration("20190218112458_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("storegit.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Fname");

                    b.Property<string>("Lnam");

                    b.Property<int>("NumberHome");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("storegit.Models.NewOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<int?>("Userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("NewOrder");
                });

            modelBuilder.Entity("storegit.Models.NewProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<int>("Price");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("NewProduct");
                });

            modelBuilder.Entity("storegit.Models.NewUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email");

                    b.Property<string>("name");

                    b.Property<int>("phone");

                    b.HasKey("id");

                    b.ToTable("NewUser");
                });

            modelBuilder.Entity("storegit.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("storegit.Models.OrderAndProduct", b =>
                {
                    b.Property<int>("OrderAndProductid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("OrderAndProductid");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderAndProduct");
                });

            modelBuilder.Entity("storegit.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<int>("OrderId");

                    b.Property<int>("Price");

                    b.Property<string>("TypeName");

                    b.Property<int>("Unit");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("storegit.Models.ProductOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("storegit.Models.NewOrder", b =>
                {
                    b.HasOne("storegit.Models.NewUser", "User")
                        .WithMany()
                        .HasForeignKey("Userid");
                });

            modelBuilder.Entity("storegit.Models.Order", b =>
                {
                    b.HasOne("storegit.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storegit.Models.OrderAndProduct", b =>
                {
                    b.HasOne("storegit.Models.Order", "Order")
                        .WithMany("OrderAndProduct")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("storegit.Models.Product", "Product")
                        .WithMany("OrderAndProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storegit.Models.ProductOrder", b =>
                {
                    b.HasOne("storegit.Models.NewOrder", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("storegit.Models.NewProduct", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
