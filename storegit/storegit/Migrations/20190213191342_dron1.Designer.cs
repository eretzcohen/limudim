// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using storegit.Models;
using System;

namespace storegit.Migrations
{
    [DbContext(typeof(shopeContext))]
    [Migration("20190213191342_dron1")]
    partial class dron1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("storegit.Models.Adress", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityAddress");

                    b.Property<string>("HomeAdress");

                    b.Property<int>("HomeNamber");

                    b.HasKey("id");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("storegit.Models.NewOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<int?>("Userid");

                    b.Property<int?>("Usersid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.HasIndex("Usersid");

                    b.ToTable("NewOrder");
                });

            modelBuilder.Entity("storegit.Models.NewProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<int>("Price");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("NewProduct");
                });

            modelBuilder.Entity("storegit.Models.NewUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email");

                    b.Property<string>("name");

                    b.Property<int>("phone");

                    b.HasKey("id");

                    b.ToTable("NewUser");
                });

            modelBuilder.Entity("storegit.Models.orders", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("NewUserid");

                    b.Property<int?>("Usersid");

                    b.Property<string>("data");

                    b.HasKey("id");

                    b.HasIndex("NewUserid");

                    b.HasIndex("Usersid");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("storegit.Models.ProductOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("storegit.Models.Products", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("color");

                    b.Property<int?>("ordersid");

                    b.Property<int>("price");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.HasIndex("ordersid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("storegit.Models.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Adressid");

                    b.Property<string>("email");

                    b.Property<string>("name");

                    b.Property<int>("phone");

                    b.HasKey("id");

                    b.HasIndex("Adressid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("storegit.Models.NewOrder", b =>
                {
                    b.HasOne("storegit.Models.NewUser", "User")
                        .WithMany()
                        .HasForeignKey("Userid");

                    b.HasOne("storegit.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Usersid");
                });

            modelBuilder.Entity("storegit.Models.orders", b =>
                {
                    b.HasOne("storegit.Models.NewUser")
                        .WithMany("Orders")
                        .HasForeignKey("NewUserid");

                    b.HasOne("storegit.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Usersid");
                });

            modelBuilder.Entity("storegit.Models.ProductOrder", b =>
                {
                    b.HasOne("storegit.Models.NewOrder", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("storegit.Models.NewProduct", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storegit.Models.Products", b =>
                {
                    b.HasOne("storegit.Models.orders")
                        .WithMany("products")
                        .HasForeignKey("ordersid");
                });

            modelBuilder.Entity("storegit.Models.Users", b =>
                {
                    b.HasOne("storegit.Models.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("Adressid");
                });
#pragma warning restore 612, 618
        }
    }
}
